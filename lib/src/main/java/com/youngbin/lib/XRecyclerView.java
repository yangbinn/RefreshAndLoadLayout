package com.youngbin.lib;import android.content.Context;import android.support.annotation.Nullable;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.StaggeredGridLayoutManager;import android.util.AttributeSet;import android.view.View;public class XRecyclerView extends RecyclerView implements ILoad {    private RefreshAndLoadAdapter mAdapter;    private LayoutManager mLayoutManager;    private ILoad.OnScrollAndClickListener mScrollListener;    public XRecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle);    }    public XRecyclerView(Context context, @Nullable AttributeSet attrs) {        this(context, attrs, 0);    }    public XRecyclerView(Context context) {        this(context, null);    }    @Override    public void setLayoutManager(LayoutManager layout) {        super.setLayoutManager(layout);        mLayoutManager = layout;    }    @Override    public void setAdapter(Adapter adapter) {        super.setAdapter(adapter);        if (adapter != null && adapter instanceof RefreshAndLoadAdapter) {            mAdapter = (RefreshAndLoadAdapter) adapter;            //监听底部view            mAdapter.setOnFooterClickListener(new RefreshAndLoadAdapter.OnFooterClickListener() {                @Override                public void onClick(View view) {                    if (mScrollListener != null) {                        mScrollListener.onClick(view);                    }                }            });        }    }    @Override    public void onScrolled(int dx, int dy) {        super.onScrolled(dx, dy);        if (mScrollListener != null) {            //监听滑动事件            mScrollListener.onScroll(dx, dy);        }    }    @Override    public boolean canPreload() {        if (mAdapter == null || mLayoutManager == null) {            return false;        }        int lastPosition = getLastPosition(mLayoutManager);        //当前屏幕所看到的子项个数        int visibleItemCount = mLayoutManager.getChildCount();        return visibleItemCount > 0 && lastPosition >= getAdapter().getItemCount() - 2;    }    @Override    public void setState(SwipeRefreshAndLoadLayout.LoadState loadState) {        if (mAdapter != null) {            mAdapter.setState(loadState);        }    }    @Override    public void setOnScrollListener(ILoad.OnScrollAndClickListener listener) {        mScrollListener = listener;    }    /**     * 获取屏幕显示的最后一个view的位置     */    private int getLastPosition(RecyclerView.LayoutManager manager) {        int position = -1;        if (manager instanceof LinearLayoutManager) {//网格            position = ((LinearLayoutManager) manager).findLastVisibleItemPosition();        } else if (manager instanceof StaggeredGridLayoutManager) {//瀑布流布局            StaggeredGridLayoutManager layoutManager = (StaggeredGridLayoutManager) manager;            int[] positions = layoutManager.findLastVisibleItemPositions(new int[layoutManager.getSpanCount()]);            position = getMaxPosition(positions);        }        return position;    }    /**     * 获得最大的位置     */    private int getMaxPosition(int[] positions) {        int maxPosition = Integer.MIN_VALUE;        for (int position : positions) {            maxPosition = Math.max(maxPosition, position);        }        return maxPosition;    }}